openapi: 3.0.0
info:
  description: 'This API is the backend of Trader Joe: https://traderjoexyz.com/'
  version: '1.0.0'
  title: 'Trader Joe API'
  termsOfService: 'https://docs.traderjoexyz.com/main/welcome/about-trader-joe'
  contact:
    email: 'hello@traderjoexyz.com'
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: https://trader-joe-2-api.herokuapp.com/
    description: Production server (uses live data)
  - url: http://localhost:3000/
    description: Local development server
tags:
  - name: Trader Joe API
    description: Brand new Trader Joe API
components:
  schemas:
    Hat: 
      {
        "properties": {
            "description": {
                "type": "string"
            },
            "external_url": {
                "type": "string"
            },
            "id": {
                "type": "string"
            },
            "image": {
                "type": "string"
            },
            "name": {
                "type": "string"
            }
        },
        "required": [
            "name"
        ],
        "type": "object"
      }
    StakeMetrics:
      {
        "properties": {
            "apr24h": {
                "type": "number"
            },
            "apr7d": {
                "type": "number"
            },
            "apy24h": {
                "type": "number"
            },
            "apyAverage": {
                "type": "number"
            },
            "oneDayFees": {
                "type": "number"
            },
            "totalStakedUSD": {
                "type": "number"
            }
        },
        "required": [
            "apr24h",
            "apr7d",
            "apy24h",
            "apyAverage",
            "oneDayFees",
            "totalStakedUSD"
        ],
        "type": "object"
      }
    Pool:
      {
        "properties": {
            "address": {
                "type": "string"
            },
            "apr": {
                "type": "number"
            },
            "apy": {
                "type": "number"
            },
            "fees24hs": {
                "type": "number"
            },
            "token0": {
                "type": "string"
            },
            "token0Symbol": {
                "type": "string"
            },
            "token1": {
                "type": "string"
            },
            "token1Symbol": {
                "type": "string"
            },
            "tvl": {
                "type": "number"
            },
            "volume24hs": {
                "type": "number"
            }
        },
        "required": [
            "address",
            "apr",
            "apy",
            "fees24hs",
            "token0",
            "token0Symbol",
            "token1",
            "token1Symbol",
            "tvl",
            "volume24hs"
        ],
        "type": "object"
      }
    PoolsPage:
      {
        "properties": {
            "limit": {
                "type": "number"
            },
            "offset": {
                "type": "number"
            },
            "pools": {
                "items": {
                  "$ref": "#/components/schemas/Pool"
                },
                "type": "array"
            }
        },
        "required": [
            "limit",
            "offset",
            "pools"
        ],
        "type": "object"
      }
    Farm:
      {
        "properties": {
            "apr": {
                "type": "number"
            },
            "apy": {
                "type": "number"
            },
            "id": {
                "type": "string"
            },
            "masterchef": {
                "type": "string"
            },
            "pair": {
                "type": "string"
            },
            "token0": {
                "type": "string"
            },
            "token0Name": {
                "type": "string"
            },
            "token1": {
                "type": "string"
            },
            "token1Name": {
                "type": "string"
            },
            "tvl": {
                "type": "number"
            }
        },
        "required": [
            "apr",
            "apy",
            "id",
            "pair",
            "tvl"
        ],
        "type": "object"
      }
    FarmsPage:
      {
        "properties": {
            "farms": {
                "items": {
                    "$ref": "#/components/schemas/Farm"
                },
                "type": "array"
            },
            "limit": {
                "type": "number"
            },
            "offset": {
                "type": "number"
            }
        },
        "required": [
            "farms",
            "limit",
            "offset"
        ],
        "type": "object"
      }
    PoolsTVL:
      {
        "properties": {
            "tvl": {
                "type": "number"
            }
        },
        "required": [
            "tvl"
        ],
        "type": "object"
      }
paths:
  /status:
    get:
      tags:
        - ping, health, status
      summary: Just a ping
      responses:
        200:
          description: 'OK'
  /supply/circulating:
    get:
      tags:
        - circulating supply
      summary: Return the circulating supply for...
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: 148991609094653607326581507
  /supply/circulating-adjusted:
    get:
      tags:
        - circulating supply adjusted
      summary: Circulating supply divided by 10^18
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: 148992290
  /supply/total:
    get:
      tags:
        - Joe total supply
      summary: Total supply of Joe
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: 263100406110202143733180705
  /supply/max:
    get:
      tags:
        - Joe max supply
      summary: Max supply of Joe
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: 500000000000000000000000000
  /nft/hat:
    get:
      tags:
        - A beatiful hat
      summary: Just a beatiful hat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Hat'
  /nft/hat/{id}:
    get:
      parameters:
        - name: id
          in: path
          description: Hat id
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - A beatiful hat
      summary: Just a beatiful hat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Hat'
  /priceavax/{token}:
    get:
      parameters:
        - name: token
          in: path
          description: Token name or address
          required: true
          schema:
            type: string
      tags:
        - Token price in avax
      summary: Returns the current price of the token in avax
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: 9585243807460309
  /priceusd/{token}:
    get:
      parameters:
        - name: token
          in: path
          description: Token name or address
          required: true
          schema:
            type: string
      tags:
        - Token price in usd
      summary: Returns the current price of the token in usd
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: 2709726995236876976
  /lending/supply:
    get:
      tags:
        - Lending supply
      summary: Returns the total lending supply
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: 2709726995236876976
  /lending/borrow:
    get:
      tags:
        - Lending borrow
      summary: Returns the total lending borrow
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: 2709726995236876976
  /v2/pools:
    get:
      tags:
        - Get all pools in Trader Joe
      summary: Returns the pools of all Trader Joe through Covalent
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolsPage'
  /v2/pools/tvl:
    get:
      tags:
        - Get TVL for all pools in Trader Joe
      summary: Returns the Get TVL for all pools in Trader Joe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolsTVL'
  /v2/pools/{token1}/{token2}:
    get:
      parameters:
        - name: token1
          in: path
          description: First token of the pair
          required: true
          schema:
            type: string
        - name: token2
          in: path
          description: Second token of the pair
          required: true
          schema:
            type: string
      tags:
        - Get a specific pool in Trader Joe
      summary: Get a specific pool in Trader Joe through Covalent
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
  /v2/farms:
    get:
      tags:
        - Get all farms in Trader Joe
      summary: Returns the farms of all Trader Joe through YieldMonitor
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmsPage'
  /v2/farms/{farmNumber}:
    get:
      parameters:
        - name: farmNumber
          in: path
          description: Number of the farm.
          required: true
          schema:
            type: string
      tags:
        - Get a specific farm in Trader Joe
      summary: Get a specific farm in Trader Joe through YieldMonitor
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
  /v2/thegraph/pools:
    get:
      tags:
        - Get all pools in Trader Joe
      summary: Returns the pools of all Trader Joe through TheGraph
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolsPage'
  /v2/thegraph/pools/{token1}/{token2}:
    get:
      parameters:
        - name: token1
          in: path
          description: First token of the pair
          required: true
          schema:
            type: string
        - name: token2
          in: path
          description: Second token of the pair
          required: true
          schema:
            type: string
      tags:
        - Get a specific pool in Trader Joe
      summary: Get a specific pool in Trader Joe through TheGraph
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
  /v2/thegraph/farms:
    get:
      tags:
        - Get all farms in Trader Joe
      summary: Returns the farms of all Trader Joe through TheGraph
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmsPage'
  /v2/thegraph/farms/{masterchef}/{farmAddress}:
    get:
      parameters:
        - name: masterchef
          in: path
          description: Address of the masterchef version
          required: true
          schema:
            type: string
        - name: farmAddress
          in: path
          description: Address of the farm
          required: true
          schema:
            type: string
      tags:
        - Get a specific farm in Trader Joe
      summary: Get a specific farm in Trader Joe through TheGraph
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
  /v2/stake:
    get:
      tags:
        - Get stake metrics in Trader Joe
      summary: Get stake metrics in Trader Joe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakeMetrics'
