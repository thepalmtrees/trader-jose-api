// THIS IS A GENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  BigDecimal: string;
  BigInt: string;
  Bytes: string;
};

export type History = {
  __typename?: 'History';
  block: Scalars['BigInt'];
  id: Scalars['ID'];
  jlpAge: Scalars['BigDecimal'];
  jlpAgeRemoved: Scalars['BigDecimal'];
  jlpBalance: Scalars['BigDecimal'];
  jlpDeposited: Scalars['BigDecimal'];
  jlpWithdrawn: Scalars['BigDecimal'];
  owner: MasterChef;
  timestamp: Scalars['BigInt'];
};

export type MasterChef = {
  __typename?: 'MasterChef';
  history: Array<History>;
  id: Scalars['ID'];
  jlpAge: Scalars['BigDecimal'];
  jlpAgeRemoved: Scalars['BigDecimal'];
  jlpBalance: Scalars['BigDecimal'];
  jlpDeposited: Scalars['BigDecimal'];
  jlpWithdrawn: Scalars['BigDecimal'];
  joe: Scalars['Bytes'];
  joePerSec: Scalars['BigInt'];
  masterPid: Scalars['Int'];
  owner: Scalars['Bytes'];
  poolCount: Scalars['BigInt'];
  pools: Array<Pool>;
  startTimestamp: Scalars['BigInt'];
  totalAllocPoint: Scalars['BigInt'];
  updatedAt: Scalars['BigInt'];
};

export type Pool = {
  __typename?: 'Pool';
  accJoePerShare: Scalars['BigInt'];
  allocPoint: Scalars['BigInt'];
  balance: Scalars['BigInt'];
  block: Scalars['BigInt'];
  entryUSD: Scalars['BigDecimal'];
  exitUSD: Scalars['BigDecimal'];
  id: Scalars['ID'];
  jlpAge: Scalars['BigDecimal'];
  jlpAgeRemoved: Scalars['BigDecimal'];
  jlpBalance: Scalars['BigDecimal'];
  jlpDeposited: Scalars['BigDecimal'];
  jlpWithdrawn: Scalars['BigDecimal'];
  joeHarvested: Scalars['BigDecimal'];
  joeHarvestedUSD: Scalars['BigDecimal'];
  lastRewardTimestamp: Scalars['BigInt'];
  owner: MasterChef;
  pair: Scalars['Bytes'];
  rewarder?: Maybe<Rewarder>;
  timestamp: Scalars['BigInt'];
  updatedAt: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  users: Array<User>;
};

export type PoolHistory = {
  __typename?: 'PoolHistory';
  block: Scalars['BigInt'];
  entryUSD: Scalars['BigDecimal'];
  exitUSD: Scalars['BigDecimal'];
  id: Scalars['ID'];
  jlpAge: Scalars['BigDecimal'];
  jlpAgeRemoved: Scalars['BigDecimal'];
  jlpBalance: Scalars['BigDecimal'];
  jlpDeposited: Scalars['BigDecimal'];
  jlpWithdrawn: Scalars['BigDecimal'];
  joeHarvested: Scalars['BigDecimal'];
  joeHarvestedUSD: Scalars['BigDecimal'];
  pool: Pool;
  timestamp: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
};

export type Query = {
  __typename?: 'Query';
  hello: Scalars['String'];
};

export type Rewarder = {
  __typename?: 'Rewarder';
  decimals: Scalars['Int'];
  endTimestamp: Scalars['BigInt'];
  id: Scalars['ID'];
  name: Scalars['String'];
  rewardToken: Scalars['Bytes'];
  symbol: Scalars['String'];
  tokenPerSec: Scalars['BigInt'];
};

export type User = {
  __typename?: 'User';
  address: Scalars['Bytes'];
  amount: Scalars['BigInt'];
  block: Scalars['BigInt'];
  entryUSD: Scalars['BigDecimal'];
  exitUSD: Scalars['BigDecimal'];
  id: Scalars['ID'];
  joeHarvested: Scalars['BigDecimal'];
  joeHarvestedUSD: Scalars['BigDecimal'];
  pool?: Maybe<Pool>;
  rewardDebt: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
};
